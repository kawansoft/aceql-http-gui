#######################################################################
# aceql-server.properties
#
# Default properties file for AceQL HTTP Web Server
#######################################################################
 
#######################################################################
#                  AceQL Manager Servlet Section
#
# Name of the AceQL Manager servlet to call.
# 
#######################################################################

serverSqlManagerServletName=aceql

#######################################################################
#               Tomcat JDBC Connection Pool Section
# 
# Properties for creating an embedded Tomcat JDBC Pool.
# See http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html
#
# (If you don't want to use Tomcat JDBC Pool and implement another 
# connection pool in your own CommonsConfigurator.getConnection()
# implementation, just comment the driverClassName property).
# 
# 1) Add to the database property the database names separated by commas.
# 
# 2) Fill the mandatory properties if you want to use Tomcat JDBC Pool: 
#  -> driverClassName:    The fully qualified Java class name of 
#                         the JDBC driver to be used.
#  -> url:                The connection URL to be passed to 
#                         our JDBC driver to establish a connection
#  -> username:           The connection username to be passed to 
#                         our JDBC driver to establish a connection
#  -> password:           The connection password  to be passed to 
#                         our JDBC driver to establish a connection
#
# You may specify other properties as defined in:
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
# and in
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes
#
# Each property must be postfixed by a dot separator and the database name 
#
# Example:
# driverClassName.my_database = org.postgresql.Driver
# url.my_database= jdbc:postgresql://localhost:5432/my_database  
# username.my_database= user1  
# password.my_database= password1 
#
# driverClassName.my_database_2 = org.postgresql.Driver
# url.my_database_2 = jdbc:postgresql://localhost:5432/aceql_demo
# username.my_database_2 = user1
# password.my_database_2 = password1
#######################################################################

# Database names separated by commas
databases = kawansoft_example

# Mandatory JDBC properties:
driverClassName.kawansoft_example = org.postgresql.Driver
url.kawansoft_example= jdbc:postgresql://localhost:5432/kawansoft_example
username.kawansoft_example= user1  
password.kawansoft_example= password1  

# Mandatory JDBC properties:
#driverClassName.kawansoft_example = org.gjt.mm.mysql.Driver
#url.aceql_demo= jdbc:postgresql://localhost:5432/aceql_demo
#username.aceql_demo= user1  
#password.aceql_demo= password1  

# Other useful properties.
#
# validationQuery clause must be modified for some databases.
#validationQuery.kawansoft_example=SELECT 1  
#testOnBorrow.kawansoft_example=true  
#jdbcInterceptors.kawansoft_example=ConnectionState;StatementFinalizer  
#removeAbandoned.kawansoft_example=true
#removeAbandonedTimeout.kawansoft_example=720

#initialSize.kawansoft_example = 1
#maxIdle.kawansoft_example = 1
#minIdle.kawansoft_example = 1
#initialSize.kawansoft_example = 1
#maxActive.kawansoft_example = 1

#######################################################################
#                     System Properties Section (optional)            
#
# Allows to set or clear System Properties before server start.
#          
# Syntax               
# systemSetProperty.propertyName=propertyValue
# systemClearProperty.propertyName
#######################################################################

# AceQL Web server does not use SecureRandom on Unix/Linux because of
# slow performances. See http://goo.gl/80X8sT.
# So we use: -Djava.security.egd=file:/dev/./urandom
# Uncomment to force AceQL Web server to use default 
# SecureRandom on Unix/Linux:

#systemClearProperty.java.security.egd

#######################################################################
#                        Database Configurators Section (optional)
#
# Database Configurator to use.
# Must be in the CLASSPATH when starting Server.
# (Default configurator DatabaseConfigurator is already in CLASSPATH.)
#
# Database Configurator is optional.
# AceQL uses the default Configurator DatabaseConfigurator for all 
# databases if not specified.
# 
# DatabaseConfigurator definition is mandatory if wou want to secure
# the login: extend DefaultDatabaseConfigurator and implement the login
# method.
#
# Each property must be post fixed by a dot separator and the database name 
#
# You may use the same DatabaseConfigurator for all databases.
#
#######################################################################

#databaseConfiguratorClassName.kawansoft_example=org.kawanfw.test.api.server.config.TestDatabaseConfigurator
#databaseConfiguratorClassName.aceql_demo=org.kawanfw.test.api.server.config.TestDatabaseConfigurator

# Uncomment to use ready to SSH authentication:
#databaseConfiguratorClassName.kawansoft_example=org.kawanfw.sql.api.server.SshAuthDatabaseConfigurator

#######################################################################
#            Upload & Download Configurators (optional)

# No need to implement your own classes. 
# See org.kawanfw.sql.api.server.blob package.
#######################################################################

#blobDownloadConfiguratorClassName=org.kawanfw.sql.api.server.blob.DefaultBlobDownloadConfigurator
#blobUploadConfiguratorClassName=org.kawanfw.sql.api.server.blob.DefaultBlobUploadConfigurator

#######################################################################
#            Session Configurator (optional)

# No need to implement your own classes. 
# See org.kawanfw.sql.api.server.session package for more info.
#######################################################################

# Uncomment this if you want to use JWT tokens:
#sessionConfiguratorClassName=org.kawanfw.sql.api.server.session.JwtSessionConfigurator

# Secret value needed for JWT generation. Uncomment and Change the value:
#JwtSessionConfiguratorSecret=changeit

#######################################################################
#                     Context Properties Section (optional)            
#
# Allows to setContext Properties before server start.
#          
# Syntax               
# context.propertyName=propertyValue
#######################################################################

#######################################################################
#            Default Tomcat HTTP Connector Section (optional)
# 
# Tomcat HTTP Connector attributes for non-SSL sessions.
#
# Each Connector attribute must be prefixed by "connector."
# You may define all attributes defined in Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html
# except SSL attributes that should be defined in next section
#######################################################################

# Example: Change default maxThreads from 200 to 300
#connector.maxThreads=300  

#######################################################################
#             SSL Tomcat HTTP Connector Section (optional)
# 
# Configure this section if you want to use SSL.
#
# Each SSL HTTP Connector attribute must be prefixed by "sslConnector." 
# See Tomcat 8.5 doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#SSL_Support
#######################################################################

# Set to true to activate a SSL Connector
sslConnector.SSLEnabled=false 

# Define your SSL port
sslConnector.port=9443  

# Default values for SSL attributes - should not be changed.
sslConnector.scheme=https    
sslConnector.protocol=org.apache.coyote.http11.Http11Protocol  
sslConnector.sslProtocol=TLS   
sslConnector.secure=true

# Values for the SSL Certificate are stored in a Java Keystore. 
# See Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/ssl-howto.html#Prepare_the_Certificate_Keystore
# See Java doc: http://docs.oracle.com/javase/7/docs/technotes/tools/#security
sslConnector.keystoreFile=c:\\.keystore
sslConnector.keystorePass=changeit 
sslConnector.keyPass=
sslConnector.keyAlias=

# Other optional Connector values for the SSL Connector
sslConnector.maxThreads=300  
