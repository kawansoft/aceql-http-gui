#######################################################################
# aceql-server.properties
#
# Default properties file for AceQL HTTP Web Server
#######################################################################
 
#######################################################################
#                  AceQL Manager Servlet Section
#
# Name of the AceQL Manager servlet to call.
# 
#######################################################################

serverSqlManagerServletName=aceql

#######################################################################
#               Tomcat JDBC Connection Pool Section
# 
# Properties for creating an embedded Tomcat JDBC Pool.
# See http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html
#
# (If you don't want to use Tomcat JDBC Pool and implement another 
# connection pool in your own CommonsConfigurator.getConnection()
# implementation, just comment the driverClassName property).
# 
# 1) Add to the database property the database names separated by commas.
# 
# 2) Fill the mandatory properties if you want to use Tomcat JDBC Pool: 
#  -> driverClassName:    The fully qualified Java class name of 
#                         the JDBC driver to be used.
#  -> url:                The connection URL to be passed to 
#                         our JDBC driver to establish a connection
#  -> username:           The connection username to be passed to 
#                         our JDBC driver to establish a connection
#  -> password:           The connection password  to be passed to 
#                         our JDBC driver to establish a connection
#
# You may specify other properties as defined in:
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
# and in
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes
#
# Each property must be prefixed by the database name and a dot separator
#
# Example:
# my_database.driverClassName = org.postgresql.Driver
# my_database.url= jdbc:postgresql://localhost:5432/my_database  
# my_database.username= user1  
# my_database.password password1 
#
# my_database_2.driverClassName. = org.postgresql.Driver
# my_database_2.url = jdbc:postgresql://localhost:5432/aceql_demo
# my_database_2.username = user1
# my_database_2.password = password1
#######################################################################

# Database names separated by commas
databases = kawansoft_example

# Mandatory JDBC properties:

# PostgreSQL example
kawansoft_example.driverClassName = org.postgresql.Driver
kawansoft_example.url= jdbc:postgresql://localhost:5432/kawansoft_example
kawansoft_example.username= user1  
kawansoft_example.password= password1  

# MySQL example
#kawansoft_example.driverClassName = org.gjt.mm.mysql.Driver
#kawansoft_example.url= jdbc:mysql://localhost:3306/kawansoft_example
#kawansoft_example.username= user1  
#kawansoft_example.password= password1 

# Other optional useful properties:

# validationQuery clause must be modified for some databases.
kawansoft_example.validationQuery=SELECT 1  
kawansoft_example.testOnBorrow=true  
kawansoft_example.jdbcInterceptors=ConnectionState;StatementFinalizer  
kawansoft_example.removeAbandoned=true
kawansoft_example.removeAbandonedTimeout=720

kawansoft_example.initialSize = 5
kawansoft_example.minIdle = 5
kawansoft_example.maxIdle = 10
kawansoft_example.maxActive = 10

#######################################################################
#                     System Properties Section (optional)            
#
# Allows to set or clear System Properties before server start.
#          
# Syntax               
# systemSetProperty.propertyName=propertyValue
# systemClearProperty.propertyName
#######################################################################

# AceQL Web server does not use SecureRandom on Unix/Linux because of
# slow performances. See http://goo.gl/80X8sT.
# So we use: -Djava.security.egd=file:/dev/./urandom
# Uncomment to force AceQL Web server to use default 
# SecureRandom on Unix/Linux:

#systemClearProperty.java.security.egd

#######################################################################
#                        Database Configurators Section (optional)
#
# Database Configurator to use.
# Must be in the CLASSPATH when starting Server.
# (Default configurator DatabaseConfigurator is already in CLASSPATH.)
#
# Database Configurator is optional.
# AceQL uses the default Configurator DatabaseConfigurator for all 
# databases if not specified.
# 
# DatabaseConfigurator definition is mandatory if wou want to secure
# the login: extend DefaultDatabaseConfigurator and implement the login
# method.
#
# Each property must be prefixed by the database name and a dot separator
#
# You may use the same DatabaseConfigurator for all databases.
#
#######################################################################

#kawansoft_example.databaseConfiguratorClassName=org.kawanfw.test.api.server.config.TestDatabaseConfigurator

# Uncomment to use ready to SSH authentication:
#kawansoft_example.databaseConfiguratorClassName=org.kawanfw.sql.api.server.SshAuthDatabaseConfigurator

#######################################################################
#            Upload & Download Configurators (optional)

# No need to implement your own classes. 
# See org.kawanfw.sql.api.server.blob package.
#######################################################################

#blobDownloadConfiguratorClassName=org.kawanfw.sql.api.server.blob.DefaultBlobDownloadConfigurator
#blobUploadConfiguratorClassName=org.kawanfw.sql.api.server.blob.DefaultBlobUploadConfigurator

#######################################################################
#            Session Configurator (optional)

# No need to implement your own classes. 
# See org.kawanfw.sql.api.server.session package for more info.
#######################################################################

# Uncomment this if you want to use JWT tokens:
#sessionConfiguratorClassName=org.kawanfw.sql.api.server.session.JwtSessionConfigurator

# Secret value needed for JWT generation. Uncomment and Change the value:
#JwtSessionConfiguratorSecret=changeit

#######################################################################
#                     Context Properties Section (optional)            
#
# Allows to setContext Properties before server start.
#          
# Syntax               
# context.propertyName=propertyValue
#######################################################################

#######################################################################
#            Default Tomcat HTTP Connector Section (optional)
# 
# Tomcat HTTP Connector attributes for non-SSL sessions.
#
# Each Connector attribute must be prefixed by "connector."
# You may define all attributes defined in Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html
# except SSL attributes that should be defined in next section
#######################################################################

# Example: Change default maxThreads from 200 to 300
#connector.maxThreads=300  

#######################################################################
#             SSL Tomcat HTTP Connector Section (optional)
# 
# Configure this section if you want to use SSL.
#
# Each SSL HTTP Connector attribute must be prefixed by "sslConnector." 
# See Tomcat 8.5 doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#SSL_Support
#######################################################################

# Set to true to activate a SSL Connector
sslConnector.SSLEnabled=false 

# Define your SSL port
sslConnector.port=9443  

# Default values for SSL attributes - should not be changed.
sslConnector.scheme=https    
sslConnector.protocol=org.apache.coyote.http11.Http11Protocol  
sslConnector.sslProtocol=TLS   
sslConnector.secure=true

# Values for the SSL Certificate are stored in a Java Keystore. 
# See Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/ssl-howto.html#Prepare_the_Certificate_Keystore
# See Java doc: http://docs.oracle.com/javase/7/docs/technotes/tools/#security
sslConnector.keystoreFile=c:\\.keystore
sslConnector.keystorePass=changeit 
sslConnector.keyPass=changeit
sslConnector.keyAlias=

# Other optional Connector values for the SSL Connector
sslConnector.maxThreads=300  
