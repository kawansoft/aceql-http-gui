#######################################################################
# aceql-server.properties
#
# Default properties file for AceQL HTTP Web Server
#######################################################################
 
#######################################################################
#               Tomcat JDBC Connection Pool Section
# 
# Properties for creating an embedded Tomcat JDBC Pool.
# See http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html
#
# (If you don't want to use Tomcat JDBC Pool and implement another 
# connection pool in your own DatabaseConfigurator.getConnection()
# implementation, just comment the driverClassName property).
# 
# 1) Add to the "databases" property the database names separated by 
#    commas.
# 
# 2) Fill the mandatory properties if you want to use Tomcat JDBC Pool: 
#  -> driverClassName:    The fully qualified Java class name of 
#                         the JDBC driver to be used.
#  -> url:                The connection URL to be passed to 
#                         our JDBC driver to establish a connection
#  -> username:           The connection username to be passed to 
#                         our JDBC driver to establish a connection
#  -> password:           The connection password  to be passed to 
#                         our JDBC driver to establish a connection
#
# You may specify other properties as defined in:
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
# and in
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes
#
# Each property must be prefixed by the database name and a dot separator.
#
# Examples:
#
# databases = my_database, my_database_2
#
# my_database.driverClassName = org.postgresql.Driver
# my_database.url= jdbc:postgresql://localhost:5432/my_database  
# my_database.username= user1  
# my_database.password= password1 
#
# my_database_2.driverClassName = org.gjt.mm.mysql.Driver
# my_database_2.url = jdbc:postgresql://localhost:5432/my_database_2
# my_database_2.username = user1
# my_database_2.password = password1
#######################################################################

# Database names separated by commas
databases = sampledb

# Mandatory JDBC properties:

# PostgreSQL example
sampledb.driverClassName = org.postgresql.Driver
sampledb.url= jdbc:postgresql://localhost:5432/sampledb
sampledb.username= user1  
sampledb.password= password1  

# MySQL example
#sampledb.driverClassName = org.gjt.mm.mysql.Driver
#sampledb.url= jdbc:mysql://localhost:3306/sampledb
#sampledb.username= user1  
#sampledb.password= password1 

# SQL Server example
#sampledb.driverClassName = com.microsoft.sqlserver.jdbc.SQLServerDriver
#sampledb.url= jdbc:sqlserver://localhost:1433;database=sampledb
#sampledb.username= user1  
#sampledb.password= password1  

# Oracle example
#sampledb.driverClassName = oracle.jdbc.driver.OracleDriver
#sampledb.url= jdbc:oracle:thin:sampledb@//localhost:1521/XE
#sampledb.username= user1  
#sampledb.password= password1 

# Define pool size
sampledb.initialSize = 10
sampledb.minIdle = 10
sampledb.maxIdle = 50
sampledb.maxActive = 50

# Make sure returned connections are not in the middle of a transaction
sampledb.rollbackOnReturn=true

# The removeAbandoned & removeAbandonedTimeout Properties allow to
# remove automatically the abandoned connections so that they 
# are recycled in the pool and will be available for other client users. 
# removeAbandonedTimeout defines the timeout in seconds before the removal.
# These settings are useful in order to avoid connection pool exhaustion 
# when client user programs in C#, Java or Python don't close explicitly 
# their connection.
# Just set removeAbandoned=true for your database and abandoned connections
# will thus be recycled in the connection pool after removeAbandonedTimeout 
# seconds.
# See http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
# for more info and for other important properties.
sampledb.removeAbandoned=false
sampledb.removeAbandonedTimeout=120

#######################################################################
#                        User Authentication Section (optional)
#
# Allows to define the UserAuthenticator to use for authenticating 
# remote client users before allowing them to execute SQL Requests.
#
# UserAuthenticator is optional. If no class is defined, 
# the DefaultUserAuthenticator will be loaded that grants free database
# access to all users. 
# 
# So, an UserAuthenticator implementation should be defined if you want to 
# secure the login: select among the 4 built-in & ready to use 
# implementations or develop your own implementation.
#
# These are the predefined and ready to use UserAuthenticator
# implementations of the org.kawanfw.sql.api.server package:
# - 1) LdapUserAuthenticator: authenticates users against a LDAP server.
# - 2) SshUserAuthenticator: authenticates users against a SSH server.
# - 3) WebServiceUserAuthenticator: authenticates users against a Web 
#      Service developed and deployed by your organization.
# - 4) WindowsUserAuthenticator: authenticates users against a Windows 
#      machine on which the AceQL instance is running.
#
# In order to define the runtime behavior: each UserAuthenticator 
# implementation has it's own properties prefixed by the class name 
#######################################################################

# Uncomment to activate one of the built-in concrete UserAuthenticator:
#userAuthenticatorClassName=LdapUserAuthenticator
#userAuthenticatorClassName=SshUserAuthenticator
#userAuthenticatorClassName=WebServiceUserAuthenticator
#userAuthenticatorClassName=WindowsUserAuthenticator

#######################################
# LDAP Authentication properties
#######################################

# LdapUserAuthenticator property: URL of the LDAP server 
ldapUserAuthenticator.url=ldap://ldap.forumsys.com:389

#######################################
# SSH Authentication properties
#######################################

# SshUserAuthenticator properties: host or IP and port (defaults to 22) 
sshUserAuthenticator.host=10.10.10.10
sshUserAuthenticator.port=22

#######################################
# Web Service Authentication properties
#######################################

# The Authentication Web Service must be developed and deployed by
# your organization. 
# It must accept 2 POST parameters "username" and "password" and must return 
# either:
# - the JSON string {"status"="OK"} if the authentication succeeds.
# - the JSON string {"status"="FAIL"} if the authentication fails.

# URL of the Authentication Web Service to call to authenticate client users. 
webServiceUserAuthenticator.url=https://www.acme.com/aceql-auth-ws

# Defines how long to wait for the response. 0 means wait indefinitely.
webServiceUserAuthenticator.timeoutSeconds=5

# Set to true to trace http client calls on stdout (for debug)
webServiceUserAuthenticator.httpTrace=false

#######################################
# Windows Authentication properties
#######################################

# WindowsUserAuthenticator property: Windows domain
# May be null/empty, or "." or mydomain.com...
windowsUserAuthenticator.domain=.

# Or you may define you own UserAuthenticator implementation, 
# your class must be then in the CLASSPATH. Full name will package is required:
#userAuthenticatorClassName=com.mycompany.MyUserAuthenticator

#######################################################################
#                       SQL Firewall Managers Section (optional)
#
# Defines SQL firewall rulesets to use for each database.
#
# Classes must be in the CLASSPATH prior to AceQL Web Server start.
# (Default DefaultSqlFirewall is already in CLASSPATH.)
#
# SQL firewalls are optional.
# AceQL uses the default Firewall DefaultSqlFirewallManager
# for all databases if not specified. 
# DefaultSqlFirewallManager allows all incoming queries.
# 
# Each property must be prefixed by the database name and a dot 
# separator.
# 
# SqlFirewallManager may be chained in property value by separating 
# class names by a comma.  
# When SqlFirewallManager classes are chained, an AND condition is
# applied to all the SqlFirewallManager execution conditions in order 
# to compute final allow.
# For example, the allowExecuteUpdate() of each chained SqlFirewallManager 
# instance must return true in order to allow updates of the database.
#
# The org.kawanfw.sql.api.server.firewall package contains several 
# ready to use SqlFirewallManager that can be used - and chained -  without 
# any coding or changes:
# - CsvRulesManager: manager that applies rules written in a CSV file.
# - DenyDclManager: manager that denies any DCL (Data Control Language) call.
# - DenyDdlManager: manager that denies any DDL (Data Definition Language) 
#   call.
# - DenyExecuteUpdateManager: manager that denies any update of the 
#   SQL database. 
# - DenyMetadataQueryManager: manager that denies the use of the AceQL 
#   Metadata Query API.
# - DenyStatementClassManager: manager that denies any call of the the raw 
#   Statement Java class. (Calling Statements without parameters is forbidden).
#
# You may use the same SqlFirewallManager classes for all databases.
# See Javadoc for more info at https://www.aceql.com/rest/soft/5.0/javadoc.
#######################################################################

# An example that defines two built in firewalls to chain:
# - First DenyExecuteUpdateManager will deny write access to database,
# - Second DenyDdlManager will deny to pass DDL statements such as
#    DROP, CREATE TABLE, etc.

#sampledb.sqlFirewallManagerClassNames=\
#    DenyDclManager,\
#    DenyDdlManager


#######################################################################
#
#                SSL Configuration Section (optional)
#
# Configure this section if you want to use SSL. This is done with the 
# Default Tomcat HTTP Connector  
#
# See Tomcat 8.5 doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#SSL_Support
#
# Each SSL attribute must be prefixed by "sslConnector." 
#######################################################################

# Set to true to activate SSL on Default HTTP Connector
sslConnector.SSLEnabled=false 

# Default values for SSL attributes - should not be changed.
sslConnector.scheme=https    
sslConnector.protocol=org.apache.coyote.http11.Http11Protocol  
sslConnector.sslProtocol=TLS
sslConnector.secure=true

# Values for the SSL Certificate are stored in a Java Keystore. 
# See Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/ssl-howto.html#Prepare_the_Certificate_Keystore
# See Java doc: http://docs.oracle.com/javase/7/docs/technotes/tools/#security
sslConnector.keystoreFile=c:\\.keystore
sslConnector.keystorePass=changeit 
sslConnector.keyPass=changeit
sslConnector.keyAlias=tomcat


#######################################################################
#               HTTP Connector Attributes Section (optional)
#
# You may define all attributes defined in Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#Attributes
# except SSL attributes that must be defined in previous section
#
# Each Connector attribute must be prefixed by "connector."
#######################################################################

# Change default maxThreads from 200 to 300
connector.maxThreads=300  

#######################################################################
#
#               HTTP2 Configuration Section (optional)
#
#######################################################################

# If set to true, protocol will be updated to HTTP/2
#updateToHttp2Protocol=true

#######################################################################
#             ThreadPoolExecutor Section (optional)
#
# Allows to define the parameters of the
# java.util.concurrent.ThreadPoolExecutor instance used
# to execute all servlet requests in async mode.
#
# The below default parameters are passed to the first 
# ThreadPoolExecutor constructor. See https://bit.ly/2QkMg5S.
#
# See ThreadPoolExecutor Javadoc for more info: https://bit.ly/2MBYQrd.
# Default values should be appropriate for most AceQL configurations.
#######################################################################

# The number of threads to keep in the pool, even if they are idle
corePoolSize=100

# The maximum number of threads to allow in the pool
maximumPoolSize=200

#the time unit for the keepAliveTime argument
unit=SECONDS

# When the number of threads is greater than the core, this is 
# the maximum time that excess idle threads will wait for new tasks 
# before terminating
keepAliveTime=10

# The BlockingQueue class to use in ThreadPoolExecutor constructor
workQueueClassName=java.util.concurrent.ArrayBlockingQueue

# The initial capacity of the BloquingQueue<Runnable> 
# (O for no or default initial capacity.)
capacity=50000

#######################################################################
#            Session Configurator (optional)
#
# It is not required nor recommended to implement your own class.
# See org.kawanfw.sql.api.server.session package for more info.
#######################################################################

#sessionConfiguratorClassName=DefaultSessionConfigurator

# Comment previous line and uncomment following line if you want to 
# use JWT tokens:
#sessionConfiguratorClassName=JwtSessionConfigurator

# Secret value needed for JWT generation. Uncomment & change the value:
#jwtSessionConfiguratorSecret=changeit


#######################################################################
#                        Database Configurators Section (optional)
#
# Database Configurator to use for each database. 
# It is not required nor recommended to implement your own class.
#
# Configure only if you want to use your own JDBC connection pool,
# or if you want to manage you own Connection.close() method. 
# See Server Guide or Javadoc for more info.
#
# Class must be in the CLASSPATH prior to AceQL Web Server start.
# (Default configurator DefaultDatabaseConfigurator is already in 
# CLASSPATH.)
#
# Database Configurator is optional.
# AceQL uses the default Configurator DefaultDatabaseConfigurator 
# for all databases if not specified.
#
# Each property must be prefixed by the database name and a dot 
# separator.
#
# You may use the same DatabaseConfigurator for all databases.
#
#######################################################################

# An example
#sampledb.databaseConfiguratorClassName=\
#org.kawanfw.test.api.server.config.TestDatabaseConfigurator

# DefaultDatabaseConfigurator property. Allows to define the maximum rows 
# per request to be returned to the client. If this limit is exceeded, 
# the excess rows are silently dropped. 0  means there is no limit
defaultDatabaseConfigurator.maxRows=0

#######################################################################
#            Upload & Download Configurators (optional)
#
# It is not required nor recommended to implement your own class.
#
# if blobDownloadConfiguratorClassName and/or 
# blobDownloadConfiguratorClassName are not specified, the default 
# class sql.api.server.blob.DefaultBlobDownloadConfigurator &
# org.kawanfw.sql.api.server.blob.DefaultBlobUploadConfigurator
# are loaded.
#
# See org.kawanfw.sql.api.server.blob package for more info.
#######################################################################

blobDownloadConfiguratorClassName=DefaultBlobDownloadConfigurator
blobUploadConfiguratorClassName=DefaultBlobUploadConfigurator


#######################################################################
#                     System Properties Section (optional)            
#
# Allows to set or clear System Properties before server start.
#          
# Syntax:               
# systemSetProperty.propertyName=propertyValue
# systemClearProperty.propertyName
#######################################################################

# AceQL Web server does not use SecureRandom on Unix/Linux because of
# slow performances. See http://goo.gl/80X8sT.
# So we use: -Djava.security.egd=file:/dev/./urandom
# Uncomment to force AceQL Web server to use default 
# SecureRandom on Unix/Linux:

#systemClearProperty.java.security.egd

#######################################################################
#                  AceQL Manager Servlet Section
#
# Allows to define the call name of the AceQL Manager servlet.
#
# This is the name the client side will use to call AceQL:
# http(s)://host:port/<AceQL Manager servlet call name>
#######################################################################

aceQLManagerServletCallName=aceql

#######################################################################
#                     Servlets Section (optional)            
#
# Allows to define your servlets that can interact with AceQL
# Web Server.
# (In order to query info about JDBC pools in use, or modify a
#   pool size, etc.)
#          
# 1) Add to the "servlets" property the servlets names separated by 
#    commas.
# 
# 2) For each servlet name:
#   - Add a property with "servlet name.class" to define the servlet 
#     class name.
#   - Add a property with "servlet name.url-pattern" to define 
#     the servlet url-pattern, i.e. the path to the servlet in the
#     AceQL URL. 
# 
# Each servlet class must be in the CLASSPATH prior to AceQL Web 
# Server start.
#
# The provided defaultPoolsInfo servlet allows to gather current info 
# from JDBC pools created in the Tomcat JDBC Connection Pool Section.
# See org.kawanfw.sql.api.server.DefaultPoolsInfo Javadoc & source code.
#######################################################################

# Servlets names separated by commas
servlets = defaultPoolsInfo

# This servlet allows displaying for each database the pool info.  
# See "Tomcat JDBC Connection Pool Section" at beginning of file.
#
defaultPoolsInfo.class = org.kawanfw.sql.api.server.DefaultPoolsInfo
defaultPoolsInfo.url-pattern = /default_pools_info

# Add if necessary you own servlet(s):
