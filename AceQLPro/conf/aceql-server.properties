#######################################################################
# aceql-server.properties
#
# Default properties file for AceQL HTTP Web Server
#######################################################################
 
 #######################################################################
#           License Info Section (for commercial databases only)
#
# This section allows you to define the license values that you 
# have received by email. 
#
#           (License Info are not required in Version 1.0 Beta)
#######################################################################

license.email = john@johndoegroup.com
license.name = John Doe
license.company = John Doe Group
license.licenseKey  = SERVER-JOHN-550727ff567662b6476eaa924d24de5fcc510915


#######################################################################
#                  AceQL Manager Servlet Section
#
# Allows to define the call name of the AceQL Manager servlet.
#
# This is the name the client side will use to call AceQL:
# http(s)://host:port/<AceQL Manager servlet call name>
#######################################################################

aceQLManagerServletCallName=aceql


#######################################################################
#               Tomcat JDBC Connection Pool Section
# 
# Properties for creating an embedded Tomcat JDBC Pool.
# See http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html
#
# (If you don't want to use Tomcat JDBC Pool and implement another 
# connection pool in your own DatabaseConfigurator.getConnection()
# implementation, just comment the driverClassName property).
# 
# 1) Add to the "databases" property the database names separated by 
#    commas.
# 
# 2) Fill the mandatory properties if you want to use Tomcat JDBC Pool: 
#  -> driverClassName:    The fully qualified Java class name of 
#                         the JDBC driver to be used.
#  -> url:                The connection URL to be passed to 
#                         our JDBC driver to establish a connection
#  -> username:           The connection username to be passed to 
#                         our JDBC driver to establish a connection
#  -> password:           The connection password  to be passed to 
#                         our JDBC driver to establish a connection
#
# You may specify other properties as defined in:
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Common_Attributes
# and in
# http://tomcat.apache.org/tomcat-8.5-doc/jdbc-pool.html#Tomcat_JDBC_Enhanced_Attributes
#
# Each property must be prefixed by the database name and a dot separator.
#
# Examples:
#
# databases = my_database, my_database_2
#
# my_database.driverClassName = org.postgresql.Driver
# my_database.url= jdbc:postgresql://localhost:5432/my_database  
# my_database.username= user1  
# my_database.password password1 
#
# my_database_2.driverClassName = org.gjt.mm.mysql.Driver
# my_database_2.url = jdbc:postgresql://localhost:5432/my_database_2
# my_database_2.username = user1
# my_database_2.password = password1
#######################################################################

# Database names separated by commas
databases = kawansoft_example

# Mandatory JDBC properties:

# SQL Server example
kawansoft_example.driverClassName = com.microsoft.sqlserver.jdbc.SQLServerDriver
kawansoft_example.url= jdbc:sqlserver://localhost:1433;database=kawansoft_example
kawansoft_example.username= user1  
kawansoft_example.password= password1  

# Oracle example
#kawansoft_example.driverClassName = oracle.jdbc.driver.OracleDriver
#kawansoft_example.url= jdbc:oracle:thin:kawansoft_example@//localhost:1521/XE
#kawansoft_example.username= user1  
#kawansoft_example.password= password1 

# Other optional useful properties:

# validationQuery clause must be modified for some databases.
#kawansoft_example.validationQuery=SELECT 1  
#kawansoft_example.testOnBorrow=true  
#kawansoft_example.jdbcInterceptors=ConnectionState;StatementFinalizer  

kawansoft_example.initialSize = 10
kawansoft_example.minIdle = 10
kawansoft_example.maxIdle = 100
kawansoft_example.maxActive = 100


#######################################################################
#                        Database Configurators Section (optional)
#
# Database Configurator to use for each database.
#
# Class must be in the CLASSPATH prior to AceQL Web Server start.
# (Default configurator DefaultDatabaseConfigurator is already in 
#  CLASSPATH.)
#
# Database Configurator is optional.
# AceQL uses the default Configurator DefaultDatabaseConfigurator 
# for all databases if not specified.
# 
# DatabaseConfigurator definition is mandatory if you want to secure
# the login: extend DefaultDatabaseConfigurator and implement the login
# method.
#
# Each property must be prefixed by the database name and a dot 
# separator.
#
# You may use the same DatabaseConfigurator for all databases.
#
#######################################################################

#kawansoft_example.databaseConfiguratorClassName=\
#org.kawanfw.test.api.server.config.TestDatabaseConfigurator

# Uncomment to use ready to use SSH authentication:
#kawansoft_example.databaseConfiguratorClassName=\
#org.kawanfw.sql.api.server.SshAuthDatabaseConfigurator


#######################################################################
#            Default Tomcat HTTP Connector Section (optional)
#            1) Base attributes
#
# You may define all attributes defined in Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html
# except SSL attributes that must be defined in next section
#
# Each Connector attribute must be prefixed by "connector."
#######################################################################

# Change default maxThreads from 200 to 300
connector.maxThreads=300  


#######################################################################
#             Default Tomcat HTTP Connector Section (optional)
#             2) SSL attributes
#
# Configure this section if you want to use SSL with the 
# Default Tomcat HTTP Connector  
#
# See Tomcat 8.5 doc:
# http://tomcat.apache.org/tomcat-8.5-doc/config/http.html#SSL_Support
#
# Each SSL attribute must be prefixed by "sslConnector." 
#######################################################################

# Set to true to activate SSL on Default HTTP Connector
sslConnector.SSLEnabled=false 

# Default values for SSL attributes - should not be changed.
sslConnector.scheme=https    
sslConnector.protocol=org.apache.coyote.http11.Http11Protocol  
sslConnector.sslProtocol=TLS
sslConnector.secure=true

# Values for the SSL Certificate are stored in a Java Keystore. 
# See Tomcat 8.5 Doc:
# http://tomcat.apache.org/tomcat-8.5-doc/ssl-howto.html#Prepare_the_Certificate_Keystore
# See Java doc: http://docs.oracle.com/javase/7/docs/technotes/tools/#security
sslConnector.keystoreFile=c:\\.keystore
sslConnector.keystorePass=changeit 
sslConnector.keyPass=changeit
sslConnector.keyAlias=


#######################################################################
#            Session Configurator (optional)
#
# It is not required nor recommended to implement your own class.
# See org.kawanfw.sql.api.server.session package for more info.
#######################################################################

# Uncomment this if you want to use JWT tokens:
#sessionConfiguratorClassName=\
#org.kawanfw.sql.api.server.session.JwtSessionConfigurator

# Secret value needed for JWT generation. Uncomment & change the value:
#jwtSessionConfiguratorSecret=changeit


#######################################################################
#            Upload & Download Configurators (optional)
#
# It is not required to implement your own classes.
#
# if blobDownloadConfiguratorClassName and/or 
# blobDownloadConfiguratorClassName are not specified, the default 
# class sql.api.server.blob.DefaultBlobDownloadConfigurator &
# org.kawanfw.sql.api.server.blob.DefaultBlobUploadConfigurator
# are loaded.
#
# See org.kawanfw.sql.api.server.blob package for more info.
#######################################################################

#blobDownloadConfiguratorClassName=\
#org.kawanfw.sql.api.server.blob.DefaultBlobDownloadConfigurator

#blobUploadConfiguratorClassName=\
#org.kawanfw.sql.api.server.blob.DefaultBlobUploadConfigurator


#######################################################################
#                     System Properties Section (optional)            
#
# Allows to set or clear System Properties before server start.
#          
# Syntax:               
# systemSetProperty.propertyName=propertyValue
# systemClearProperty.propertyName
#######################################################################

# AceQL Web server does not use SecureRandom on Unix/Linux because of
# slow performances. See http://goo.gl/80X8sT.
# So we use: -Djava.security.egd=file:/dev/./urandom
# Uncomment to force AceQL Web server to use default 
# SecureRandom on Unix/Linux:

#systemClearProperty.java.security.egd

#######################################################################
#                     Servlets Sections (optional)            
#
# Allows to define your servlets that can interact with AceQL
# Web Server.
# (In order to query info about JDBC pools in use, or modify a
#   pool size, etc.)
#          
# 1) Add to the "servlets" property the servlets names separated by 
#    commas.
# 
# 2) For each servlet name:
#   - Add a property with "servlet name.class" to define the servlet 
#     class name.
#   - Add a property with "servlet name.url-pattern" to define 
#     the servlet url-pattern, i.e. the path to the servlet in the
#     AceQL URL. 
# 
# Each servlet class must be in the CLASSPATH prior to AceQL Web 
# Server start.
#
# The provided defaultPoolsInfo servlet allows to gather current info 
# from JDBC pools created in the Tomcat JDBC Connection Pool Section.
# See org.kawanfw.sql.api.server.DefaultPoolsInfo Javadoc & source code.
#######################################################################

# Servlets names separated by commas
servlets = defaultPoolsInfo

# This servlet allows to display Tomcat JDBC Pool info for the pools
# created for each database. 
# See "Tomcat JDBC Connection Pool Section" at beginning of file.
#
defaultPoolsInfo.class = org.kawanfw.sql.api.server.DefaultPoolsInfo
defaultPoolsInfo.url-pattern = /default_pools_info

# Add if necessary you own servlet(s):
